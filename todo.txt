has to be admin to delete user
has to be loadout owner to delete it
* logout isn't deleting localStorage token *
* deploy *
 
Get stats of 20 last matches
Get stats of lifetime
Determine if the player has evolved in the last matches in comparison to lifetime
Show stats affected
Save the best match loadout

update untilt to use bcrypt


* Issues 
- There's apparently a issue with NextJS building everything, it seems like it's trying to create a new model whenever I use any function from UserModel. This is fixed exporting the already created model

- NextApiRequest
I had to find out how to merge some more types to the NextApiRequest for a piece of code that required it in strict typescript

- localStorage
had to write checks to localStorage availability due to server side rendering of nextjs
Window, and document are not available on the server. This is why you'll run into these types of errors if you are trying to access window properties or document.
In my case, I was persisting my authentication token to localStorage on the previous application.

To avoid running into these undefined errors at compile and build time, you can run a simple check.

- Font change tailwind
The "extend" functionality allows you to add your font(s) alongside the existing font utilities.

Add a theme.extend.fontFamily section to your Tailwind config

- Type safety with extraReducers
Was getting an error regarding putting a promise inside a redux state. Resolved it by searching through the redux toolkit documentation and correctly making "action" type safe.

- non-serializable value was detected in the state
Was passing aixos whole result, that apart from data, it contains various other fields related to the request. Although i'm only saving data and not other fields, as the whole res object passes to the store it goes through a middleware called Serializability, which is included in redux-toolkit and enforces Redux recommendation to only store serializable data.
Serializable means it can be written down as text and converted back to original object without losing information, which doesn't work with functions. A javascript function apart from code also have scope (memory associated to it), which cannot be represented as text.
Serializability checks the whole payload (it is executed before your data reaches the store, so it doesn't know which parts will be used) and notices config. As config has methods among its members Serializability alerts you that it is not serializable. You could switch the middleware off, but it can detect genuine issues, so it's generally a better idea to just keep only relevant data in the payload.